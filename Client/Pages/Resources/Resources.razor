@page "/Resources"
@inject HttpClient http
@using System.Net.Http.Json
@using SoftwareLogAnalizer.Shared
@using SoftwareLogAnalizer.Shared.Model
@using SoftwareLogAnalizer.Shared.Model.Enums
@inject MudBlazor.ISnackbar Snackbar
@inject IDialogService DialogService


<h3>Resources</h3>

<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Add new Resource
</MudButton>

<MudDataGrid T="Resource" Items=resources FixedHeader="true" FixedFooter="true" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)"
             SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter">
    <ToolBarContent>
        @*<MudText Typo="Typo.h6">Periodic Elements</MudText>*@
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn CellStyle="width: 10px" Property="x => x.Id" Title="Id" IsEditable="false" />
        <PropertyColumn CellStyle="width: 400px" Property="x => x.ResourceName" Title="Resource name" />
        <PropertyColumn CellStyle="width: 200px" Property="x => x.ProjectResourceId" Title="MS Project resource Id" />
        <PropertyColumn CellStyle="width: 200px" Property="x => x.ResourceType" Title="Resource type">
            <EditTemplate>
                <MudSelect T="ResourceType" @bind-Value=context.Item.ResourceType Required RequiredError="You must select a Resource type" Margin="@Margin.Dense">
                    @foreach (ResourceType type in Enum.GetValues(typeof(ResourceType)))
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn CellStyle="width: 200px" Property="x => x.ResourceCategory" Title="Resource category">
            <EditTemplate>
                <MudSelect T="ResourceCategory" @bind-Value=context.Item.ResourceCategory Required RequiredError="You must select a Resource category" Margin="@Margin.Dense">
                    @foreach (ResourceCategory type in Enum.GetValues(typeof(ResourceCategory)))
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn CellStyle="width: 200px" Property="x => x.ResourceUsageState" Title="Usage state">
            <EditTemplate>
                <MudSelect T="ResourceUsageState" @bind-Value=context.Item.ResourceUsageState Required RequiredError="You must select a Resource state" Margin="@Margin.Dense">
                    @foreach (ResourceUsageState type in Enum.GetValues(typeof(ResourceUsageState)))
                    {
                        <MudSelectItem Value="@type">@type</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>

        <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => Delete(@context.Item.Id))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Resource" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Form</p>
        <MudSwitch @bind-Checked="@_isCellEditMode">Cell</MudSwitch>
    </div>
    <div class="d-flex justify-start align-center">
        <p class="mud-typography mud-typography-body1 mud-inherit-text mr-2">Manual</p>
        <MudSwitch @bind-Checked="@_editTriggerRowClick">On Row Click</MudSwitch>
    </div>
</div>

@*<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>*@


@code {



    private Resource resource = new Resource();
    private IEnumerable<Resource>? resources = new List<Resource>();

    private bool _readOnly=true;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private string _searchString = "";

    // events
    void StartedEditingItem(Resource item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(Resource item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(Resource item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        EditResource(item);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        var unsortedResources = await http.GetFromJsonAsync<List<Resource>>("api/Resources/GetResources");
        resources = unsortedResources.OrderBy(x => x.Id).ToList();
    }

    private Func<Resource, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ProjectResourceId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ResourceCategory.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ResourceName.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ResourceType.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ResourceUsageState.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task EditResource(Resource resource)
    {
        await http.PutAsJsonAsync($"api/Resources/PutResource", resource);
        await LoadData();
    }

    private async Task Delete(int resourceId)
    {
        await http.DeleteAsync($"api/Resources/DeleteResource/{resourceId}");
        Snackbar.Add("Resource Deleted", Severity.Warning);
        await LoadData();
    }

    private async Task OpenDialog()
    {
        await OnInitializedAsync();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddResource>("New Resource", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            LoadData();
        }
    }

}

